<?php

namespace App\Http\Controllers\Api;

use App\Form;
use App\Http\Controllers\Controller;
use App\Image;
use App\Translation;
use App\Wysiwyg;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Mews\Purifier\Facades\Purifier;

class FormController extends Controller
{
    public function index()
    {
        $forms = Form::with('brands', 'products', 'domains', 'translations','translations.image','translations.wysiwyg')->get();

        return response()->json($forms);
    }

    public function store(Request $request)
    {
        $form = new Form;
        $form->id = request('id');
        $form->name = request('name');
        $form->slug = request('slug');
        $form->owner = request('owner');
        $form->owner_id =  request('owner_id');
        $form->start_d = request('start_d');
        $form->end_d = request('end_d');
        $form->groups = request('groups');
        $form->banners = request('banners');
        $form->landingPage = request('landingPage');
        $form->phone = request('phone');
        $form->email_to = request('email_to');
        $form->email_subject = request('email_subject');
        $form->email_body = Purifier::clean(request('email_body'));;
        $form->sms_text = request('sms_text');
        $form->web_push_link = request('web_push_link');
        $form->web_push_text = request('web_push_text');
        $form->active = request('active');
        $form->save();

        //TRANSLATIONS
        if (request('languages_arr')) {
            $data = array();
            foreach(request('languages_arr') as $language) {
                $data[] = [
                    'form_id' => request('id'),
                    'language_id' => $language['id'],
                    'description' => Purifier::clean($language['description']),
                    'body' => Purifier::clean($language['body']),
                    'terms' => Purifier::clean($language['terms']),
                    'created_at' => Carbon::now()->toDateTimeString(),
                    'updated_at' => Carbon::now()->toDateTimeString(),
                ];
            }
            DB::table('languages_forms_translation')->insert($data);

            //Getting autogenerated ids
            $ids = array();
            $fileData = array();
            $firstId = (int)DB::getPdo()->lastInsertId() - count($data)+1;
            for ($i = 1; $i <= count($data); $i++) {
                $ids[] = $firstId++;
            }

            foreach(request('languages_arr') as $language) {
                $fileData[] = [
                    'imageFile' => $language['imageFile'],
                    'wysiwygFile' => $language['wysiwygFile'],
                ];
            }

            $imageData = array();
            $wysiwygData = array();

            foreach (array_combine($ids, $fileData) as $key => $language) {
                if ($language['imageFile']) {
                    foreach($language['imageFile'] as $image) {
                        $imageData[] = [
                            'translation_id' => $key,
                            'form_id' => request('id'),
                            'image_name' => $image,
                            'image_meta' => request('owner_id'),
                            'created_at' => Carbon::now()->toDateTimeString(),
                            'updated_at' => Carbon::now()->toDateTimeString(),
                        ];
                    }
                }
                if ($language['wysiwygFile']) {
                    foreach($language['wysiwygFile'] as $wysiwyg) {
                        $wysiwygData[] = [
                            'translation_id' => $key,
                            'form_id' => request('id'),
                            'wysiwyg_name' => $wysiwyg,
                            'wysiwyg_meta' => request('owner_id'),
                            'created_at' => Carbon::now()->toDateTimeString(),
                            'updated_at' => Carbon::now()->toDateTimeString(),
                        ];
                    }
                }
            }

            DB::table('images')->insert($imageData);
            DB::table('wysiwygs')->insert($wysiwygData);
        }

        //PIVOTS
        foreach(request('brands_arr') as $brand) {
            $form->brands()->attach([$request['id'] => ['brand_id' => $brand['key']]]);
        }
        foreach(request('products_arr') as $product) {
            $form->products()->attach([$request['id'] => ['product_id' => $product['key']]]);
        }
        foreach(request('domains_arr') as $domain) {
            $form->domains()->attach([$request['id'] => ['domain_id' => $domain['key']]]);
        }

        return response()->json(Form::with('brands', 'products', 'domains', 'translations','translations.image','translations.wysiwyg')->get());
    }

    public function edit(Request $request, $id)
    {
        $form = Form::find($id);
        $form->name = $request->get('name');
        $form->slug = $request->get('slug');
        $form->owner = $request->get('owner');
        $form->owner_id = $request->get('owner_id');
        $form->start_d = $request->get('start_d');
        $form->end_d = $request->get('end_d');
        $form->groups = $request->get('groups');
        $form->banners = $request->get('banners');
        $form->landingPage = $request->get('landingPage');
        $form->phone = $request->get('phone');
        $form->email_to = $request->get('email_to');
        $form->email_subject = $request->get('email_subject');
        $form->email_body = Purifier::clean($request->get('email_body'));
        $form->sms_text = $request->get('sms_text');
        $form->web_push_link = $request->get('web_push_link');
        $form->web_push_text = $request->get('web_push_text');
        $form->save();

        //PIVOTS (NEED TO BE REFACTORED)
        $form->brands()->wherePivot('form_id', '=', $id)->detach();
        $form->products()->wherePivot('form_id', '=', $id)->detach();
        $form->domains()->wherePivot('form_id', '=', $id)->detach();

        foreach(request('brands_arr') as $brand) {
            $form->brands()->attach([$request['id'] => ['brand_id' => $brand['key']]]);
        }
        foreach(request('products_arr') as $product) {
            $form->products()->attach([$request['id'] => ['product_id' => $product['key']]]);
        }
        foreach(request('domains_arr') as $domain) {
            $form->domains()->attach([$request['id'] => ['domain_id' => $domain['key']]]);
        }

        //TRANSLATIONS
        $data = array();
        $i = 0;
        $count = count(request('languages_arr'));
        while($i < $count){
            $data[] = array(
                'language_id' => request('languages_arr')[$i]['id'],
                'description' => Purifier::clean(request('languages_arr')[$i]['description']),
                'body' => Purifier::clean(request('languages_arr')[$i]['body']),
                'terms' => Purifier::clean(request('languages_arr')[$i]['terms']),
            );
            $i++;
        }

        $j = 0;
        $count1 = count(request('languages_arr'));
        while($j < $count1){
            DB::table('languages_forms_translation')->where('form_id', $id)->where('language_id', $data[$j]['language_id'])->update($data[$j]);
            $j++;
        }

        //REMOVING OLD FILES AND ADDING NEW (NEED TO BE REFACTORED)
        Image::where('form_id', '=', $id)->delete();
        Wysiwyg::where('form_id', '=', $id)->delete();

        $ids = array();
        foreach(json_decode(DB::table('languages_forms_translation')->where('form_id', $id)->get(), true) as $id) {
            $ids[] = $id['id'];
        }

        $fileData = array();
        foreach(request('languages_arr') as $language) {
            $fileData[] = [
                'imageFile' => $language['imageFile'],
                'wysiwygFile' => $language['wysiwygFile'],
            ];
        }

        $imageData = array();
        $wysiwygData = array();

        foreach (array_combine($ids, $fileData) as $key => $language) {
            foreach($language['imageFile'] as $image) {
                $imageData[] = [
                    'translation_id' => $key,
                    'form_id' => request('id'),
                    'image_name' => $image,
                    'image_meta' => request('owner_id'),
                    'created_at' => Carbon::now()->toDateTimeString(),
                    'updated_at' => Carbon::now()->toDateTimeString(),
                ];
            }
            foreach($language['wysiwygFile'] as $wysiwyg) {
                $wysiwygData[] = [
                    'translation_id' => $key,
                    'form_id' => request('id'),
                    'wysiwyg_name' => $wysiwyg,
                    'wysiwyg_meta' => request('owner_id'),
                    'created_at' => Carbon::now()->toDateTimeString(),
                    'updated_at' => Carbon::now()->toDateTimeString(),
                ];
            }
        }

        DB::table('images')->insert($imageData);
        DB::table('wysiwygs')->insert($wysiwygData);

        return response()->json(Form::with('brands', 'products', 'domains', 'translations','translations.image','translations.wysiwyg')->get());
    }

    public function updateDates(Request $request, $id)
    {
        $form = Form::find($id);
        $form->start_d = $request->get('start');
        $form->end_d = $request->get('end');
        $form->save();

        return response()->json(Form::with('brands', 'products', 'domains', 'translations','translations.image','translations.wysiwyg')->get());
    }

    public function updateStatus(Request $request, $id)
    {
        $form = Form::find($id);
        $form->active = $request->get('active');
        $form->save();

        return response()->json(Form::with('brands', 'products', 'domains', 'translations','translations.image','translations.wysiwyg')->get());
    }

    public function destroy($id)
    {
        $form = Form::find($id);
        $form->brands()->wherePivot('form_id', '=', $id)->detach();
        $form->products()->wherePivot('form_id', '=', $id)->detach();
        $form->domains()->wherePivot('form_id', '=', $id)->detach();
        Image::where('form_id', '=', $id)->delete();
        Wysiwyg::where('form_id', '=', $id)->delete();
        Translation::where('form_id', '=', $id)->delete();
        $form->delete();

        return response()->json(Form::with('brands', 'products', 'domains', 'translations','translations.image','translations.wysiwyg')->get());
    }
}
